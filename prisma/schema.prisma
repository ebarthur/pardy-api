generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  username          String             @unique
  email             String             @unique
  passwordHash      String
  firstName         String
  lastName          String
  middleName        String?
  image             String?
  emailVerified     Boolean            @default(false)
  birthDate         DateTime?          @db.Date
  registrationDate  DateTime           @default(dbgenerated("timezone('UTC'::text, now())")) @db.Timestamp(6)
  emailChange       EmailChange?
  emailVerification EmailVerification?
  passwordReset     PasswordReset?
  events            Event[]

  @@map("user")
}

model EmailChange {
  token      String   @id @db.Char(21)
  newEmail   String
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("email-change")
}

model EmailVerification {
  token      String   @id @db.Char(21)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("email-verification")
}

model PasswordReset {
  token      String   @id @db.Char(21)
  userId     Int      @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  validUntil DateTime @default(dbgenerated("(timezone('utc'::text, now()) + '2 days'::interval)")) @db.Timestamp(6)

  @@map("password-reset")
}

model Event {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  name          String
  startOn       DateTime
  createdById   Int
  description   String?
  streetNumber  Int?
  street        String?
  zip           Int?
  bldg          String?
  isPrivate     Boolean  @default(false)
  status        Status   @default(draft)
  createdBy     User     @relation(fields: [createdById], references: [id])
  rsvps         RSVP[]

  @@unique([createdById, name])
  @@map("events")
}

model Attendee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  email     String   @unique
  name      String
  rsvps     RSVP[]

  @@map("attendees")
}

model RSVP {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  attendeeId String?
  eventId    String?
  status     RSVPStatus  @default(going)
  attendee   Attendee?   @relation(fields: [attendeeId], references: [id])
  event      Event?      @relation(fields: [eventId], references: [id])

  @@unique([attendeeId, eventId])
  @@map("rsvps")
}

enum Status {
  draft
  live
  started
  ended
  canceled
}

enum RSVPStatus {
  going
  not_going @map("not-going")
  maybe
}